---
import type { HTMLAttributes } from "astro/types";
import styles from "./stack.module.css";

export type Props = HTMLAttributes<"div"> & {
  as?: keyof astroHTML.JSX.DefinedIntrinsicElements;
  /**
   * Add a gap between rows.
   */
  rowGap?: string;
  /**
   * Add a gap between columns.
   */
  columnGap?: string;
  /**
   * Display the element as inline-flex
   */
  inline?: boolean;
  /**
   * Wrap children whene there is no space for them.
   */
  wrap?: boolean;
  /**
   * Make the children grow to fill the available space instead
   * of being sized based on their content.
   */
  fill?: boolean;
  /**
   * Place the content vertically centered instead of
   * growing to fill the available space.
   */
  vAlign?: string;
  /**
   * Place the content horizontally centered instead of
   * growing to fill the available space.
   */
  hAlign?: string;
  /**
   * Set the horizontal padding (left/right)
   */
  hPadding?: string;
  /**
   * Set the vertical padding (top/bottom)
   */
  vPadding?: string;
  /**
   * Renderes children as rows or columns. The value can be one of the flex directions.
   * More info: https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction
   */
  direction?: "row" | "column" | "row-reverse" | "column-reverse";
};

const {
  rowGap = "0",
  columnGap = "0",
  as = "div",
  inline = false,
  direction = "column",
  wrap = false,
  fill = true,
  vAlign = "initial",
  hAlign = "initial",
  hPadding = "0",
  vPadding = "0",
  class: extClass,
} = Astro.props;

const Wrapper = as;

const alignmentTemplate = (prop: string) => {
  if (prop.includes("start") || prop.includes("end")) {
    return `flex-${prop}`;
  }

  return prop;
};
---

<Wrapper
  class={`${styles.Stack} ${extClass}`}
  data-stack-inline={inline}
  data-stack-wrap={wrap}
  data-stack-direction={direction}
  data-stack-fill={fill}
  data-stack-has-padding={Boolean(hPadding ?? vPadding)}
  style={{
    "--r-gap": rowGap,
    "--c-gap": columnGap,
    "--v-align": vAlign && alignmentTemplate(vAlign),
    "--h-align": hAlign && alignmentTemplate(hAlign),
    "--v-padding": vPadding,
    "--h-padding": hPadding,
  }}
>
  <slot />
</Wrapper>
